#!/usr/bin/env python3
#
# nginx-refspam-config-gen.py: Automagically creates a nginx config file for blocking referrer spam.
#
# Usage:
#   ./nginx-refspam-config-gen.py --input-source-url URL --output-config-file FILE
#
# By default this script will write out to /etc/nginx/conf.d/referrer-blacklist.conf.
# Regular nginx configurations will pick up this file automatically. However, you will
# still need to actually adjust your configuration! Specifically you should add the following
# to your server section configuration (or to the global nginx configuration):
#
#   if ($bad_referrer) { 
#    return 403; 
#   }
#
# You need to do this only once. If you re-run this script only the referrer-blacklist.conf
# is updated, which suffices. You can do this periodically by hand or set this script to run
# using cron.
#
# This script was inspired by:
# * https://gist.github.com/reederz/b0aa902dc2dbe87b5a4c
# * http://stephsharp.me/blocking-referrer-spam/
# * https://github.com/piwik/referrer-spam-blacklist 
#
# Copyright (C) Almer S. Tigelaar <firstname at lastname dot net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import urllib.request
import os.path

parser = argparse.ArgumentParser(description='Automatically generate a referrer spam nginx blacklist')

parser.add_argument('--input-source-url', '-i', dest='input_url', metavar='URL', help='Input source file (assumed to have one hostname per line)')
parser.add_argument('--output-config-file', '-o', dest='output_file', metavar='FILE', help='Output nginx auxiliary configuration file (warning: do *not* point this to your main nginx config file, as it will be overwritten if you use -f)')
parser.add_argument('--verbose', '-v', dest='verbose', action="store_true", help="Shows detailed processing information")
parser.add_argument('--force', '-f', dest='force', action="store_true", help="If the output file already exists this forces to overwrite it")

parser.set_defaults(input_url='https://raw.githubusercontent.com/piwik/referrer-spam-blacklist/master/spammers.txt', output_file='/etc/nginx/conf.d/referrer-blacklist.conf')
args = parser.parse_args()

if args.input_url is None:
    print('You must provide an input URL')
    exit(1)
if args.output_file is None:
    print('You must provide an output filename')
    exit(1)
if os.path.exists(args.output_file) and not args.force:
    print('The output file already exists: {0}, use -f to overwrite'.format(args.output_file))
    exit(1)

print('Input: {0}, Output: {1}'.format(args.input_url, args.output_file))
c = 0
with urllib.request.urlopen(args.input_url) as fi:
    with open(args.output_file, 'w') as fo:
        fo.write('# Referrer Blacklist automatically generated by nginx-refspam-config-gen.py\n')
        fo.write('map $http_referer $bad_referrer {\n') # NOTE: The typo is http_referer is on purpose
        fo.write('\thostnames;\n\n')
        fo.write('\tdefault\t0;\n')
        for l in fi:
            h = l.decode('utf8').strip()
            if args.verbose:
                print('Writing {0}'.format(h))
            fo.write('\t"~{0}"\t1;\n'.format(h))
            c += 1
        fo.write('}\n')
print('Completed. {0} entries written to blacklist'.format(c))
